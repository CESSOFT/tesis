package testgenviewsemiautomatico.repository;
/**
* Generated by CESSOFT

*/

import java.util.Vector;
import java.util.HashMap;
import junit.framework.TestSuite;
import junit.framework.Test;
import junit.framework.TestCase;
import java.io.File;
import java.io.IOException;
import org.jtestcase.JTestCase;
import org.jtestcase.JTestCaseException;
import org.jtestcase.TestCaseInstance;
import java.util.Iterator;


/**
* Test cases for class SampleTest.
 */
public class SampleTestTest extends TestCase  {

/**
* JTestCase Instance to be used in this example.
*/
private JTestCase jtestcase = null;

/**
* local object for class SampleTestLogTestCase.
*/
private static SampleTestLogTestCase logObject;

/**
* local object for class SampleTestPackageTestSuite.
*/
private static SampleTestPackageTestSuite pkgsuite;

/**
* Main method to run the example from command line.
* @param args
*             command line parameters
*/
public static void main(final String[] args) {
    junit.textui.TestRunner.run(suite());
}

/**
* Read the XML file with the test data
* and build the JTestCase instance.
*

* @param name
*        Test method name.
*/

public SampleTestTest(final String name) {
 super(name);

 try {
     File excludedTestsFile = new File("C:\\Users\\tpbm68\\Documents\\TesisProject\\TestGentView\\src\\testgenviewsemiautomatico\\repository\\", "failedData.xml");
     String dataFile = "C:\\Users\\tpbm68\\Documents\\TesisProject\\TestGentView\\src\\testgenviewsemiautomatico\\repository\\data.xml";
       jtestcase = new JTestCase(dataFile,
        "SampleTestTest");
 } catch (Exception e) {
       e.printStackTrace();
 }

}

/**
* Suite method that collects all test cases.
*
* @return
*         The test suite
*/
public static Test suite() {
    TestSuite retval = new TestSuite();
    retval.addTest(new SampleTestTest(
      "testMain"));
    retval.addTest(new SampleTestTest(
      "testSuite"));
    retval.addTest(new SampleTestTest(
      "testTestAddition"));
    retval.addTest(new SampleTestTest(
      "testTestSubtraction"));
    retval.addTest(new SampleTestTest(
      "testTestDivision"));
    return retval;
}


/**
* Tests for the method main.
*
* @throws IOException
*                     Throws IOException
*/
public final void testMain() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 1;
    Object parameters = "";
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testMain";
    SampleTestParseFailedDataFile fd = null;

    try {
        /**
        * Running test cases in a loop.
        */
        Vector testCases = jtestcase.getTestCasesInstancesInMethod(
methodName);
        String[] failedTestCases = fd.getFailedTestCases(
            "SampleTestTest",
            "testMain");

        // for each test case
        for (int i = 0; i < testCases.size(); i++) {
            // retrieve name of test case
            TestCaseInstance testCase = (TestCaseInstance) testCases.elementAt(i);


        if (pkgsuite.excludeFileExists) {
            for (int k = 0; k < failedTestCases.length; k++)  {
                if (failedTestCases[k].equals(testCase)) {
                         System.out.println("This test case is not going to be"
                           + "executed  " + pkgsuite.excludeFileExists);
                         excludeTestCase = true;
                }
            }
        }

        if (!excludeTestCase) {
             pkgsuite.totalTestCases++;
            try {            // get hashed params for this test case
 HashMap<String, Object> params = testCase.getTestCaseParams();
            parameters = params.get("var1");
            java.lang.String[] var1 = {"SpikeSource", "SpikeTestGen"};

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            SampleTest.main(var1);
            // asserting result:
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                     methodName, parameters,
                     successfulTestCase);

            } catch (Exception e) {
            String exc ="testMain"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                  methodName, parameters,
                  successfulTestCase);

            } else {
                logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, parameters,
                  failedTestCase,
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
        }
        excludeTestCase = false;
      }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, parameters,
                  failedTestCase, "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName,
                  parameters, failedTestCase, "Unexpected "
                  + "exception is caught");
    }
 }
}

/**
* Tests for the method suite.
*
* @throws IOException
*                     Throws IOException
*/
public final void testSuite() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 0;
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testSuite";
    SampleTestParseFailedDataFile fd = null;

    try {
        /**
        * Invoking the method to catch exception is the only test.
        */

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            junit.framework.Test
            result
            =
            SampleTest.suite();
            // asserting result:
               logObject.logSuccessfulTest(
                  "SampleTestTest",
                     methodName, "Testing a method with no arguments", "1");
            } catch (Exception e) {
            String exc ="testSuite"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1");

            } else {
                logObject.logFailedTest(
                  "SampleTestTest",
                methodName, "No Argument",
                "1",
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName,
                "No Argument", "1", "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1", "Unexpected         exception is caught");
    }
 }
}

/**
* Tests for the method testAddition.
*
* @throws IOException
*                     Throws IOException
*/
public final void testTestAddition() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 0;
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testTestAddition";
    SampleTestParseFailedDataFile fd = null;

    try {
        /**
        * Invoking the method to catch exception is the only test.
        */

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            SampleTest tempObject = new SampleTest();

            tempObject.testAddition();
            // asserting result:
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                     methodName, "Testing a"
                     + "void method with no arguments", "1");

            } catch (Exception e) {
            String exc ="testTestAddition"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1");

            } else {
                logObject.logFailedTest(
                  "SampleTestTest",
                methodName, "No Argument",
                "1",
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName,
                "No Argument", "1", "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1", "Unexpected         exception is caught");
    }
 }
}

/**
* Tests for the method testSubtraction.
*
* @throws IOException
*                     Throws IOException
*/
public final void testTestSubtraction() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 0;
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testTestSubtraction";
    SampleTestParseFailedDataFile fd = null;

    try {
        /**
        * Invoking the method to catch exception is the only test.
        */

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            SampleTest tempObject = new SampleTest();

            tempObject.testSubtraction();
            // asserting result:
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                     methodName, "Testing a"
                     + "void method with no arguments", "1");

            } catch (Exception e) {
            String exc ="testTestSubtraction"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1");

            } else {
                logObject.logFailedTest(
                  "SampleTestTest",
                methodName, "No Argument",
                "1",
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName,
                "No Argument", "1", "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1", "Unexpected         exception is caught");
    }
 }
}

/**
* Tests for the method testDivision.
*
* @throws IOException
*                     Throws IOException
*/
public final void testTestDivision() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 0;
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testTestDivision";
    SampleTestParseFailedDataFile fd = null;

    try {
        /**
        * Invoking the method to catch exception is the only test.
        */

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            SampleTest tempObject = new SampleTest();

            tempObject.testDivision();
            // asserting result:
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                     methodName, "Testing a"
                     + "void method with no arguments", "1");

            } catch (Exception e) {
            String exc ="testTestDivision"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1");

            } else {
                logObject.logFailedTest(
                  "SampleTestTest",
                methodName, "No Argument",
                "1",
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName,
                "No Argument", "1", "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTestTest",
                  methodName, "No Argument",
                  "1", "Unexpected         exception is caught");
    }
 }
}


}


