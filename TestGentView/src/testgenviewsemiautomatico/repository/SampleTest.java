package testgenviewsemiautomatico.repository;

/**
* Generated by TestGen4J.
* Copyright (C) 2005 SpikeSource, Inc.
*/

import java.util.Vector;
import java.util.HashMap;
import junit.framework.TestSuite;
import junit.framework.Test;
import junit.framework.TestCase;
import java.io.File;
import java.io.IOException;
import org.jtestcase.JTestCase;
import org.jtestcase.JTestCaseException;
import org.jtestcase.TestCaseInstance;
import java.util.Iterator;


/**
* Test cases for class Sample.
 */
public class SampleTest extends TestCase  {

/**
* JTestCase Instance to be used in this example.
*/
private JTestCase jtestcase = null;

/**
* local object for class LogTestCase.
*/
private static LogTestCase logObject;

/**
* local object for class PackageTestSuite.
*/
private static PackageTestSuite pkgsuite;

/**
* Main method to run the example from command line.
* @param args
*             command line parameters
*/
public static void main(final String[] args) {
    junit.textui.TestRunner.run(suite());
}

/**
* Read the XML file with the test data
* and build the JTestCase instance.
*

* @param name
*        Test method name.
*/

public SampleTest(final String name) {
 super(name);

 try {
     File excludedTestsFile = new File("C:\\Documents and Settings\\Eduardo\\Mis documentos\\NetBeansProjects\\Testgen4JSemiAutomatico\\src\\testgen4jsemiautomatico\\repository\\", "failedData.xml");
     String dataFile = "C:\\Documents and Settings\\Eduardo\\Mis documentos\\NetBeansProjects\\Testgen4JSemiAutomatico\\src\\testgen4jsemiautomatico\\repository\\data.xml";
       jtestcase = new JTestCase(dataFile,
        "SampleTest");
 } catch (Exception e) {
       e.printStackTrace();
 }

}

/**
* Suite method that collects all test cases.
*
* @return
*         The test suite
*/
public static Test suite() {
    TestSuite retval = new TestSuite();
    retval.addTest(new SampleTest(
      "testAddition"));
    retval.addTest(new SampleTest(
      "testSubtraction"));
    retval.addTest(new SampleTest(
      "testDivision"));
    return retval;
}


/**
* Tests for the method addition.
*
* @throws IOException
*                     Throws IOException
*/
public final void testAddition() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 2;
    Object[] parameters = new Object[max];
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testAddition";
    ParseFailedDataFile fd = null;

    try {
        /**
        * Running test cases in a loop.
        */
        Vector testCases = jtestcase.getTestCasesInstancesInMethod(
methodName);
        String[] failedTestCases = fd.getFailedTestCases(
            "SampleTest",
            "testAddition");

        // for each test case
        for (int i = 0; i < testCases.size(); i++) {
            // retrieve name of test case
            TestCaseInstance testCase = (TestCaseInstance) testCases.elementAt(i);


        if (pkgsuite.excludeFileExists) {
            for (int k = 0; k < failedTestCases.length; k++)  {
                if (failedTestCases[k].equals(testCase)) {
                         System.out.println("This test case is not going to be"
                           + "executed  " + pkgsuite.excludeFileExists);
                         excludeTestCase = true;
                }
            }
        }

        if (!excludeTestCase) {
             pkgsuite.totalTestCases++;
            try {            // get hashed params for this test case
 HashMap<String, Object> params = testCase.getTestCaseParams();
          for (int j = 0; j < params.size(); j++) {
                variable = variable + (j + 1);
                parameters[j] = params.get(variable);
                variable = "var";
            }

            int var1 = ((Integer) params.get("var1")).intValue();

            int var2 = ((Integer) params.get("var2")).intValue();

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            Sample tempObject = new Sample();

            int
            result
            =
            tempObject.addition(var1,
            var2);
            // asserting result:
if (testCase.getTestCaseAssertValues() != null && !testCase.getTestCaseAssertValues().keySet().isEmpty()) {Iterator<String[]> iterator = testCase.getTestCaseAssertValues().keySet().iterator();	while (iterator.hasNext()) {		String[] a = iterator.next();		boolean succeedd = testCase.assertTestVariable(a[0], result);		succeed=succeedd;	}}            if (succeed) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                   methodName, parameters,
                  successfulTestCase);

            } else {
                String myError = "Fail to test "
                  + "addition when asserting result!";
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
            }
            } catch (JTestCaseException e) {
                String myError = "Unexpected exception is thrown"
                  + "from JTestCase: " + e.getMessage();
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
 System.err.print("Error executing test case  " + testCase.getTestCaseName()); e.printStackTrace(); continue;        } catch (Exception e) {
            String exc ="testAddition"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                  methodName, parameters,
                  successfulTestCase);

            } else {
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase,
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
        }
        excludeTestCase = false;
      }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName,
                  parameters, failedTestCase, "Unexpected "
                  + "exception is caught");
    }
 }
}

/**
* Tests for the method subtraction.
*
* @throws IOException
*                     Throws IOException
*/
public final void testSubtraction() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 2;
    Object[] parameters = new Object[max];
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testSubtraction";
    ParseFailedDataFile fd = null;

    try {
        /**
        * Running test cases in a loop.
        */
        Vector testCases = jtestcase.getTestCasesInstancesInMethod(
methodName);
        String[] failedTestCases = fd.getFailedTestCases(
            "SampleTest",
            "testSubtraction");

        // for each test case
        for (int i = 0; i < testCases.size(); i++) {
            // retrieve name of test case
            TestCaseInstance testCase = (TestCaseInstance) testCases.elementAt(i);


        if (pkgsuite.excludeFileExists) {
            for (int k = 0; k < failedTestCases.length; k++)  {
                if (failedTestCases[k].equals(testCase)) {
                         System.out.println("This test case is not going to be"
                           + "executed  " + pkgsuite.excludeFileExists);
                         excludeTestCase = true;
                }
            }
        }

        if (!excludeTestCase) {
             pkgsuite.totalTestCases++;
            try {            // get hashed params for this test case
 HashMap<String, Object> params = testCase.getTestCaseParams();
          for (int j = 0; j < params.size(); j++) {
                variable = variable + (j + 1);
                parameters[j] = params.get(variable);
                variable = "var";
            }

            int var1 = ((Integer) params.get("var1")).intValue();

            int var2 = ((Integer) params.get("var2")).intValue();

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            Sample tempObject = new Sample();

            int
            result
            =
            tempObject.subtraction(var1,
            var2);
            // asserting result:
if (testCase.getTestCaseAssertValues() != null && !testCase.getTestCaseAssertValues().keySet().isEmpty()) {Iterator<String[]> iterator = testCase.getTestCaseAssertValues().keySet().iterator();	while (iterator.hasNext()) {		String[] a = iterator.next();		boolean succeedd = testCase.assertTestVariable(a[0], result);		succeed=succeedd;	}}            if (succeed) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                   methodName, parameters,
                  successfulTestCase);

            } else {
                String myError = "Fail to test "
                  + "subtraction when asserting result!";
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
            }
            } catch (JTestCaseException e) {
                String myError = "Unexpected exception is thrown"
                  + "from JTestCase: " + e.getMessage();
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
 System.err.print("Error executing test case  " + testCase.getTestCaseName()); e.printStackTrace(); continue;        } catch (Exception e) {
            String exc ="testSubtraction"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                  methodName, parameters,
                  successfulTestCase);

            } else {
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase,
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
        }
        excludeTestCase = false;
      }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName,
                  parameters, failedTestCase, "Unexpected "
                  + "exception is caught");
    }
 }
}

/**
* Tests for the method division.
*
* @throws IOException
*                     Throws IOException
*/
public final void testDivision() throws IOException {

    String failedTestCase = "", successfulTestCase = "", variable = "var";
    final int max = 2;
    Object[] parameters = new Object[max];
    boolean succeed = false, excludeTestCase = false;
    String methodName = "testDivision";
    ParseFailedDataFile fd = null;

    try {
        /**
        * Running test cases in a loop.
        */
        Vector testCases = jtestcase.getTestCasesInstancesInMethod(
methodName);
        String[] failedTestCases = fd.getFailedTestCases(
            "SampleTest",
            "testDivision");

        // for each test case
        for (int i = 0; i < testCases.size(); i++) {
            // retrieve name of test case
            TestCaseInstance testCase = (TestCaseInstance) testCases.elementAt(i);


        if (pkgsuite.excludeFileExists) {
            for (int k = 0; k < failedTestCases.length; k++)  {
                if (failedTestCases[k].equals(testCase)) {
                         System.out.println("This test case is not going to be"
                           + "executed  " + pkgsuite.excludeFileExists);
                         excludeTestCase = true;
                }
            }
        }

        if (!excludeTestCase) {
             pkgsuite.totalTestCases++;
            try {            // get hashed params for this test case
 HashMap<String, Object> params = testCase.getTestCaseParams();
          for (int j = 0; j < params.size(); j++) {
                variable = variable + (j + 1);
                parameters[j] = params.get(variable);
                variable = "var";
            }

            int var1 = ((Integer) params.get("var1")).intValue();

            int var2 = ((Integer) params.get("var2")).intValue();

            /* Now comes to what we need to test.
               we don't want Exceptions to break our tests,
            so we catch Exceptions here. */



            Sample tempObject = new Sample();

            float
            result
            =
            tempObject.division(var1,
            var2);
            // asserting result:
if (testCase.getTestCaseAssertValues() != null && !testCase.getTestCaseAssertValues().keySet().isEmpty()) {Iterator<String[]> iterator = testCase.getTestCaseAssertValues().keySet().iterator();	while (iterator.hasNext()) {		String[] a = iterator.next();		boolean succeedd = testCase.assertTestVariable(a[0], result);		succeed=succeedd;	}}            if (succeed) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                   methodName, parameters,
                  successfulTestCase);

            } else {
                String myError = "Fail to test "
                  + "division when asserting result!";
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
            }
            } catch (JTestCaseException e) {
                String myError = "Unexpected exception is thrown"
                  + "from JTestCase: " + e.getMessage();
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, myError);
 System.err.print("Error executing test case  " + testCase.getTestCaseName()); e.printStackTrace(); continue;        } catch (Exception e) {
            String exc ="testDivision"+ failedTestCase;
            if (exc != null && e.toString().startsWith(exc)) {
                logObject.logSuccessfulTest(
                  "SampleTest",
                  methodName, parameters,
                  successfulTestCase);

            } else {
                logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase,
                  "Unexpected exception is caught");
              e.printStackTrace();
            }
 }
        }
        excludeTestCase = false;
      }
    } catch (Exception e) {
        if (e instanceof java.lang.NullPointerException) {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName, parameters,
                  failedTestCase, "Null Pointer Exception caught");
        } else {
        logObject.logFailedTest(
                  "SampleTest",
                  methodName,
                  parameters, failedTestCase, "Unexpected "
                  + "exception is caught");
    }
 }
}


}


